<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprUndefined</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.sqlUrl = 'http://eltraz.dev'
global.srvUrl = 'eltraz.dev'
global.maps = ds_map_create()
global.mobs = ds_map_create()
sqlRequest('get_map_db', '')
sqlRequest('get_mob_db', '')
//global.maps = json_read("maps.json")
global.debug = true

global.player = ds_map_create()
global.inventory = ds_map_create()

global.inventory_offhand = true
global.inventory_legs = true
global.skills = ds_map_create()
global.stats = ds_map_create()
equUpdate()

global.changeMap = ""
global.mapHover = 0
global.volumeBg = 100
global.volumeSfx = 100
global.bgm = -1
global.bgmC = global.bgm

step_delta = current_time
movement_interval = 1
movement_buff = ds_list_create()

global.apiServer = network_create_socket(network_socket_tcp)
global.apiBuff = buffer_create(256, buffer_grow, 1)
global.apiIp = global.srvUrl
global.apiPort = 1337
//network_connect(global.apiServer, global.apiIp, global.apiPort)

global.posIp = global.srvUrl
global.posPort = 1338
global.posServer = network_create_socket_ext(network_socket_udp, global.posPort)
global.posBuff = buffer_create(64, buffer_grow, 1)
network_set_config(network_config_enable_reliable_udp, global.posServer)

/*message_prep(global.apiBuff)
message_write_u16(global.apiBuff, 1) // login
message_write_string(global.apiBuff, "snabel") // session
message_write_string(global.apiBuff, "test") // session
message_send(global.apiBuff)*/
//network_connect(global.apiServer, global.apiIp, global.apiPort)

/*message_prep(global.apiBuff)
message_write_u16(global.apiBuff, 1) // login
message_write_string(global.apiBuff, "snabel") // session
message_write_string(global.apiBuff, "test") // session
message_send(global.apiBuff)*/


//DEBUG DATA
var _it = ds_map_create()
ds_map_add(_it, 'name', 'Simple Sword')
ds_map_add(_it, 'text', "It's not the best... I guess you can use it as a blunt tool.")
ds_map_add(_it, 'icon', sprite360_sprItem389)
ds_map_add(_it, 'type', 'sword')
ds_map_add(_it, 'att', 12)
ds_map_add(_it, 'att_p', 5)
ds_map_add(_it, 'att_speed', 20)
ds_map_add(_it, 'crit', 2)
ds_map_add(_it, 'jump', -20)
ds_map_add_map(global.inventory, 'main_hand', _it)
invAdd(_it)



var _it3 = ds_map_create()
ds_map_add(_it3, 'name', 'Claymore')
ds_map_add(_it3, 'text', 'Braveheart style...')
ds_map_add(_it3, 'icon', sprite371_sprItem400)
ds_map_add(_it3, 'type', 'longsword')
ds_map_add(_it3, 'att', 23)
ds_map_add(_it3, 'att_p', 4)
ds_map_add(_it3, 'move_speed', -10)
ds_map_add(_it3, 'jump', -10)
invAdd(_it3)

var _it2 = ds_map_create()
ds_map_add(_it2, 'name', 'Aprentice Hat')
ds_map_add(_it2, 'text', "I found this in the attic.")
ds_map_add(_it2, 'icon', sprite519_sprItem102)
ds_map_add(_it2, 'type', 'hat')
ds_map_add_map(global.inventory, 'head', _it2)
invAdd(_it2)

var _it4 = ds_map_create()
ds_map_add(_it4, 'name', 'Metal Shield')
ds_map_add(_it4, 'text', "I think this used to be a pot lid...")
ds_map_add(_it4, 'icon', sprite503_sprItem86)
ds_map_add(_it4, 'type', 'shield')
ds_map_add(_it4, 'def', 32)
ds_map_add(_it4, 'def_p', 5)
ds_map_add(_it4, 'move_speed', -5)
ds_map_add(_it4, 'stack', 200)
invAdd(_it4)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>while(current_time - step_delta &gt; 1000/60) {
    if global.bgm != global.bgmC {
        audio_stop_sound(global.bgmC)
        audio_play_sound(global.bgm, 1, true)
        global.bgmC = global.bgm
    }
    
    if room == rm_game {
        ds_list_add(movement_buff, userX(), userY(), Player.dir, Player.anim)
        if ds_list_size(movement_buff) &gt;= movement_interval * 4 {
            message_prep(global.posBuff)
            message_write_u16(global.posBuff, userId()) // userId
            _i = 0
            repeat(movement_interval) {
                message_write_u16(global.posBuff, ds_list_find_value(movement_buff, _i))
                message_write_u16(global.posBuff, ds_list_find_value(movement_buff, _i + 1))
                message_write_s8(global.posBuff, ds_list_find_value(movement_buff, _i + 2))
                message_write_string(global.posBuff, ds_list_find_value(movement_buff, _i + 3))
                _i += 4
            }
            ds_list_clear(movement_buff)
            network_send_udp(global.posBuff, global.posIp, global.posPort, global.posBuff, buffer_tell(global.posBuff))
        }
    }
    
    step_delta += 1000/60
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var nType = ds_map_find_value(async_load, "type")
var nId = ds_map_find_value(async_load, "id")
var nPort = ds_map_find_value(async_load, "port")

switch(nType) {
    case network_type_connect:
    break; 
    
    case network_type_disconnect:
    show_message("Lost connection!")
    game_end()
    break;
    
    case network_type_data:
    var nMessage = ds_map_find_value(async_load, "buffer")
    
    if nPort == global.apiPort {
        apiMessage(nMessage)
    }else {
        //posMessage(nMessage)
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var httpResult = ds_map_find_value(async_load, "result")
show_debug_message(httpResult)
var _data = json_decode(httpResult)

if _data {
    if ds_map_find_value(_data, "success") {
        switch(ds_map_find_value(_data, "command")) {
            case 'get_map_db':
            ds_map_destroy(global.maps)
            global.maps = ds_map_find_value(_data, "data")
            break;
            
            case 'get_mob_db':
            ds_map_destroy(global.mobs)
            global.mobs = ds_map_find_value(_data, "data")
            break;
            
            case 'login':
            global.player = ds_map_find_value(_data, "data");
            userSet('id', ds_map_find_value(_data, "id"))
            room_goto(rm_game)
            break;
        }
    }else {
        switch(ds_map_find_value(_data, "command")) {
            case 'login':
            show_message("Login fail: " + ds_map_find_value(_data, "reason"))
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room == rm_game {
    network_connect(global.apiServer, global.apiIp, global.apiPort)
    
    message_prep(global.apiBuff)
    message_write_u16(global.apiBuff, 1) // login
    message_write_string(global.apiBuff, global.username)
    message_write_string(global.apiBuff, global.password)
    message_send(global.apiBuff)
    
    levelLoad(userMap())
    levelRender(userMap())
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_circle(10,10,10,1)
draw_line(10,10,10+lengthdir_x(10,0-current_time),10+lengthdir_y(10,0-current_time))
draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
